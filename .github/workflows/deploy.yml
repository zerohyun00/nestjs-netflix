name: Deploy to AWS Elastic Beanstalk # 이름

on: # master브랜치가 push 될 때 마다 밑에 jobs 실행
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # 우분투 최신환경에서 빌드한다.

    services: # db 실행
      postgres:
        image: postgres:16
        env: # postgres 설정
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >- # pipeline 돌리기전에 postgres를 돌려서 db를 확인
          --health-cmd pg_isready 
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: # 5432포트 열고 5432로 접근
          - 5432:5432

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3 # 깃헙에 최신코드를 가져온다

      - name: Set Up NodeJS
        uses: actions/setup-node@v3 # 자동으로 nodejs 설치
        with:
          node-version: '18'
      - name: Create Env File
        env:
          ENV: ${{secrets.ENV}}
          DB_TYPE: ${{secrets.DB_TYPE}}
          DB_HOST: ${{secrets.DB_HOST}}
          DB_PORT: ${{secrets.DB_PORT}}
          DB_USERNAME: ${{secrets.DB_USERNAME}}
          DB_PASSWORD: ${{secrets.DB_PASSWORD}}
          DB_DATABASE: ${{secrets.DB_DATABASE}}
          HASH_ROUNDS: ${{secrets.HASH_ROUNDS}}
          ACCESS_TOKEN_SECRET: ${{secrets.ACCESS_TOKEN_SECRET}}
          REFRESH_TOKEN_SECRET: ${{secrets.REFRESH_TOKEN_SECRET}}
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_REGION: ${{secrets.AWS_REGION}}
          BUCKET_NAME: ${{secrets.BUCKET_NAME}}
        run: |
          touch test.env
          echo ENV="test" >> test.env
          echo DB_TYPE="$DB_TYPE" >> test.env
          echo DB_HOST="localhost" >> test.env
          echo DB_PORT="$DB_PORT" >> test.env
          echo DB_USERNAME="$DB_USERNAME" >> test.env
          echo DB_PASSWORD="$DB_PASSWORD" >> test.env
          echo DB_DATABASE="$DB_DATABASE" >> test.env
          echo HASH_ROUNDS="$HASH_ROUNDS" >> test.env
          echo ACCESS_TOKEN_SECRET="$ACCESS_TOKEN_SECRET" >> test.env
          echo REFRESH_TOKEN_SECRET="$REFRESH_TOKEN_SECRET" >> test.env
          echo AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" >> test.env
          echo AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" >> test.env
          echo AWS_REGION="$AWS_REGION" >> test.env
          echo BUCKET_NAME="$BUCKET_NAME" >> test.env
          echo "test.env created"
          cat test.env

          touch .env
          echo ENV="$ENV" >> .env
          echo DB_TYPE="$DB_TYPE" >> .env
          echo DB_HOST="$DB_HOST" >> .env
          echo DB_PORT="$DB_PORT" >> .env
          echo DB_USERNAME="$DB_USERNAME" >> .env
          echo DB_PASSWORD="$DB_PASSWORD" >> .env
          echo DB_DATABASE="$DB_DATABASE" >> .env
          echo HASH_ROUNDS="$HASH_ROUNDS" >> .env
          echo ACCESS_TOKEN_SECRET="$ACCESS_TOKEN_SECRET" >> .env
          echo REFRESH_TOKEN_SECRET="$REFRESH_TOKEN_SECRET" >> .env
          echo AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" >> .env
          echo AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" >> .env
          echo AWS_REGION="$AWS_REGION" >> .env
          echo BUCKET_NAME="$BUCKET_NAME" >> .env
          echo ".env created"
          cat .env

      - name: Create Folders
        run: |
          mkdir -p ./public/movie
          mkdir -p ./public/temp

      - name: Install Dependencies # 의존성 패키지 설치
        run: npm i

      - name: Build Project
        run: npm run build # 빌드

      - name: Intall Typeorm
        run: npm i -g typeorm

      - name: Run Migration
        run: typeorm migration:run -d ./dist/database/data-source.js

      - name: Zip Artifact For Deployment
        run: zip -r deploy.zip . # 모든파일을 depoly.zip 으로 만듬

      - name: Upload To S3
        env: # 깃헙에 secret 설정해놓은거 가져옴
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_REGION: ${{secrets.AWS_REGION}}
        run: | # S3에 zip파일 업로드
          aws configure set region $AWS_REGION 
          aws s3 cp deploy.zip s3://nestjs-netflix-practice/deploy.zip

      - name: Deploy To AWS Elastic Beanstalk # AEB에 업로드
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_REGION: ${{secrets.AWS_REGION}}
        run: | # AEB 실행
          aws elasticbeanstalk create-application-version \
            --application-name "NestJS-github-real" \
            --version-label $GITHUB_SHA \
            --source-bundle S3Bucket="nestjs-netflix-practice",S3Key="deploy.zip"

          aws elasticbeanstalk update-environment \
            --application-name "NestJS-github-real" \
            --environment-name "NestJS-github-real-env" \
            --version-label $GITHUB_SHA
